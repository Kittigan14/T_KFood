<!DOCTYPE html>
<html lang="th">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ตะกร้าสินค้า</title>
  <link rel="stylesheet" href="/css/base.css" />
  <link rel="stylesheet" href="/css/cart.css" />
  <link rel="stylesheet" href="/css/notification.css" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
  <style>
    .checkout-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    .checkout-content {
      background: white;
      padding: 30px;
      border-radius: 16px;
      max-width: 500px;
      width: 90%;
      max-height: 80vh;
      overflow-y: auto;
    }

    .checkout-content h3 {
      margin-bottom: 20px;
      text-align: center;
      color: var(--color-primary);
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-group label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: var(--color-primary);
    }

    .form-group input,
    .form-group select,
    .form-group textarea {
      width: 100%;
      padding: 12px;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      font-size: 1rem;
      transition: border-color 0.3s ease;
    }

    .form-group input:focus,
    .form-group select:focus,
    .form-group textarea:focus {
      outline: none;
      border-color: var(--color-primary);
    }

    .form-group textarea {
      resize: vertical;
      min-height: 80px;
    }

    .order-summary {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 12px;
      margin: 20px 0;
    }

    .order-summary h4 {
      margin-bottom: 16px;
      color: var(--color-primary);
    }

    .summary-line {
      display: flex;
      justify-content: space-between;
      margin-bottom: 8px;
    }

    .summary-line.total {
      font-weight: 700;
      font-size: 1.2rem;
      color: var(--color-primary);
      border-top: 1px solid #e5e7eb;
      padding-top: 8px;
      margin-top: 16px;
    }

    .checkout-actions {
      display: flex;
      gap: 12px;
      margin-top: 24px;
    }

    .btn-checkout {
      flex: 1;
      background: var(--color-primary);
      color: white;
      border: none;
      padding: 14px;
      border-radius: 8px;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .btn-checkout:hover {
      background: #374151;
      transform: translateY(-2px);
    }

    .btn-checkout:disabled {
      background: #9ca3af;
      cursor: not-allowed;
      transform: none;
    }

    .btn-cancel {
      flex: 1;
      background: #6b7280;
      color: white;
      border: none;
      padding: 14px;
      border-radius: 8px;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .btn-cancel:hover {
      background: #4b5563;
    }

    .loading-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(255, 255, 255, 0.9);
      display: none;
      justify-content: center;
      align-items: center;
      border-radius: 16px;
    }

    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 4px solid #e5e7eb;
      border-top: 4px solid var(--color-primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    .success-message {
      text-align: center;
      padding: 40px 20px;
    }

    .success-message h3 {
      color: #10b981;
      margin-bottom: 16px;
    }

    .success-message p {
      margin-bottom: 24px;
      color: #6b7280;
    }

    .order-id {
      font-size: 1.2rem;
      font-weight: 700;
      color: var(--color-primary);
      background: #f3f4f6;
      padding: 8px 16px;
      border-radius: 8px;
      display: inline-block;
      margin: 16px 0;
    }
  </style>
</head>

<body>
  <div class="container">
    <h2>
      <img src="/images/icon/shopping-cart.png" alt="" />
      ตะกร้าสินค้า
    </h2>

    <div id="cart-container" class="cart-container">
      <div class="loading">กำลังโหลด...</div>
    </div>

    <!-- Notification -->
    <div id="notification" class="notification hidden">
      <span id="notificationMessage"></span>
    </div>

    <!-- Checkout Modal -->
    <div id="checkoutModal" class="checkout-modal">
      <div class="checkout-content">
        <div class="loading-overlay" id="checkoutLoading">
          <div class="loading-spinner"></div>
        </div>

        <h3>ยืนยันคำสั่งซื้อ</h3>

        <form id="checkoutForm">
          <div class="form-group">
            <label for="deliveryAddress">ที่อยู่สำหรับจัดส่ง *</label>
            <textarea id="deliveryAddress" placeholder="กรุณากรอกที่อยู่สำหรับจัดส่งสินค้า" required></textarea>
          </div>

          <div class="form-group">
            <label for="notes">หมายเหตุ (ถ้ามี)</label>
            <textarea id="notes" placeholder="ข้อมูลเพิ่มเติมสำหรับการจัดส่ง เช่น จุดสังเกต, เวลาที่สะดวก"></textarea>
          </div>

          <div class="order-summary">
            <h4>สรุปคำสั่งซื้อ</h4>
            <div id="orderSummaryContent"></div>
          </div>

          <div class="checkout-actions">
            <button type="button" class="btn-cancel" onclick="closeCheckoutModal()">
              ยกเลิก
            </button>
            <button type="submit" class="btn-checkout">ยืนยันสั่งซื้อ</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    class ShoppingCart {
      constructor() {
        this.container = document.getElementById("cart-container");
        this.cartData = [];
        this.userCoupons = [];
        this.appliedCoupon = null;
        this.loadCart();
      }

      async loadCart() {
        try {
          this.showLoading();
          const res = await fetch("/api/cart", {
            headers: {
              Accept: "application/json",
            },
          });

          if (res.status === 401) {
            this.showLoginRequired();
            return;
          }

          const data = await res.json();

          if (!data.success) {
            throw new Error(data.error || "เกิดข้อผิดพลาดในการโหลดตะกร้า");
          }

          this.cartData = data.cart || [];

          if (this.cartData.length === 0) {
            this.renderEmpty();
          } else {
            await this.loadUserCoupons();
            this.renderTable(this.cartData);
            this.updateCartTotal();
          }
        } catch (err) {
          console.error("Error loading cart:", err);
          this.showError(
            "เกิดข้อผิดพลาดในการโหลดตะกร้าสินค้า: " + err.message
          );
        }
      }

      async loadUserCoupons() {
        try {
          let res = await fetch("/api/coupons/available", {
            headers: {
              Accept: "application/json",
            },
            credentials: "include",
          });

          let data = await res.json();

          if (res.ok && data.success && data.coupons.length > 0) {
            this.userCoupons = data.coupons;
          } else {
            this.userCoupons = [];
          }
        } catch (err) {
          console.error("Error loading user coupons:", err);
          this.userCoupons = [];
        }
      }

      showLoading() {
        this.container.innerHTML = `
          <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>กำลังโหลดตะกร้าสินค้า...</p>
          </div>
        `;
      }

      showLoginRequired() {
        this.container.innerHTML = `
          <div class="empty-cart">
            <h3>กรุณาเข้าสู่ระบบ</h3>
            <p>คุณต้องเข้าสู่ระบบก่อนใช้งานตะกร้าสินค้า</p>
            <a href="/login" class="continue-shopping-btn">เข้าสู่ระบบ</a>
          </div>
        `;
      }

      showError(message) {
        this.container.innerHTML = `
          <div class="empty-cart">
            <h3>เกิดข้อผิดพลาด</h3>
            <p>${message}</p>
            <button onclick="location.reload()" class="continue-shopping-btn">ลองใหม่</button>
            <a href="/" class="continue-shopping-btn">กลับหน้าแรก</a>
          </div>
        `;
      }

      renderEmpty() {
        this.container.innerHTML = `
          <div class="empty-cart">
            <h3>ตะกร้าสินค้าว่างเปล่า</h3>
            <p>เริ่มเลือกซื้อสินค้าที่คุณต้องการได้เลย</p>
            <a href="/" class="continue-shopping-btn">เริ่มช็อปปิ้ง</a>
          </div>
        `;
      }

      renderTable(cart) {
        const rows = cart
          .map(
            (item) => `
          <tr data-item-id="${item.product_id}">
            <td data-label="สินค้า" class="product-info">
              <img src="/images/${item.image_url}" alt="${
                item.name
              }" class="product-image">
              <span class="product-name">${item.name}</span>
            </td>
            <td data-label="ราคา" class="product-price">${item.price} บาท</td>
            <td data-label="จำนวน" class="quantity-cell">
              <div class="quantity-controls">
                <button class="quantity-btn decrease" data-item-id="${
                  item.product_id
                }" ${item.quantity <= 1 ? "disabled" : ""}>-</button>
                <div class="quantity-display">${item.quantity}</div>
                <button class="quantity-btn increase" data-item-id="${
                  item.product_id
                }">+</button>
              </div>
            </td>
            <td data-label="รวม" class="product-total">${
              item.price * item.quantity + 25
            } บาท</td>
            <td data-label="จัดการ" class="actions">
              <button class="remove-btn" data-item-id="${
                item.product_id
              }" title="ลบสินค้าออกจากตะกร้า">
                ลบ
              </button>
            </td>
          </tr>
        `
          )
          .join("");

        const couponOptions = this.userCoupons
          .map(
            (coupon) =>
            `<option value="${
                  coupon.promo_code
                }" data-coupon='${JSON.stringify(coupon)}'>${coupon.name} (${
                  coupon.promo_code
                })</option>`
          )
          .join("");

        this.container.innerHTML = `
          <table class="cart-table">
            <thead>
              <tr>
                <th>สินค้า</th>
                <th>ราคา</th>
                <th>จำนวน</th>
                <th>รวม</th>
                <th>จัดการ</th>
              </tr>
            </thead>
            <tbody>${rows}</tbody>
          </table>
          <div class="cart-summary">
            <div class="cart-subtotal">
              <span>ราคาสินค้า:</span>
              <span id="subtotal">0 บาท</span>
            </div>
            <div class="cart-tax">
              <span>ค่าจัดส่ง:</span>
              <span>25</span>
            </div>
            ${
              this.appliedCoupon
                ? `
              <div class="cart-discount">
                <span>ส่วนลด (${this.appliedCoupon.promo_code}):</span>
                <span id="discount">-${this.appliedCoupon.discount.amount} บาท</span>
              </div>
            `
                : ""
            }
            <div class="cart-total-line">
              <span>รวมทั้งหมด:</span>
              <span id="total">0 บาท</span>
            </div>
            
            <div class="coupon-section">
              <h4>คูปองส่วนลด</h4>
              ${
                this.userCoupons.length > 0
                  ? `
                <div class="coupon-box">
                  <label for="couponSelect">เลือกคูปอง:</label>
                  <select id="couponSelect">
                    <option value="">-- เลือกคูปอง --</option>
                    ${couponOptions}
                  </select>
                  <button id="applyCouponBtn" ${
                    this.appliedCoupon ? "disabled" : ""
                  }>
                    ${this.appliedCoupon ? "ใช้คูปองแล้ว" : "ใช้คูปอง"}
                  </button>
                  ${
                    this.appliedCoupon
                      ? `
                    <button id="removeCouponBtn" class="remove-coupon-btn">ยกเลิกคูปอง</button>
                  `
                      : ""
                  }
                </div>
              `
                  : `
                <p class="no-coupons">คุณยังไม่มีคูปองที่สามารถใช้ได้ <a href="/coupons">รับคูปองที่นี่</a></p>
              `
              }
            </div>

            <div class="cart-actions">
              <a href="/" class="continue-shopping">เลือกสินค้าเพิ่ม</a>
              <button class="checkout-btn" onclick="openCheckoutModal()">สั่งซื้อสินค้า</button>
            </div>
          </div>
        `;

        this.container
          .querySelectorAll(".quantity-btn")
          .forEach((btn) =>
            btn.addEventListener(
              "click",
              this.handleQuantityChange.bind(this)
            )
          );
        this.container
          .querySelectorAll(".remove-btn")
          .forEach((btn) =>
            btn.addEventListener("click", this.handleRemoveItem.bind(this))
          );

        const applyCouponBtn = document.getElementById("applyCouponBtn");
        const removeCouponBtn = document.getElementById("removeCouponBtn");

        if (applyCouponBtn) {
          applyCouponBtn.addEventListener(
            "click",
            this.handleApplyCoupon.bind(this)
          );
        }

        if (removeCouponBtn) {
          removeCouponBtn.addEventListener(
            "click",
            this.handleRemoveCoupon.bind(this)
          );
        }
      }

      async handleApplyCoupon() {
        const couponSelect = document.getElementById("couponSelect");
        const selectedOption = couponSelect.selectedOptions[0];

        if (!selectedOption || !selectedOption.value) {
          this.showNotification("กรุณาเลือกคูปอง", "error");
          return;
        }

        const couponData = JSON.parse(selectedOption.dataset.coupon);
        const subtotalText = document.getElementById("subtotal").textContent;
        const orderAmount = parseInt(subtotalText.replace(" บาท", ""));

        try {
          const applyCouponBtn = document.getElementById("applyCouponBtn");
          applyCouponBtn.disabled = true;
          applyCouponBtn.textContent = "กำลังตรวจสอบ...";

          const response = await fetch("/api/promotions/validate", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Accept: "application/json",
            },
            body: JSON.stringify({
              promo_code: couponData.promo_code,
              order_amount: orderAmount,
              cart_items: this.cartData,
            }),
          });

          const result = await response.json();

          if (!response.ok || !result.valid) {
            throw new Error(result.message || "ไม่สามารถใช้คูปองได้");
          }

          this.appliedCoupon = {
            promo_code: couponData.promo_code,
            discount: result.discount,
            coupon: result.coupon,
          };

          this.showNotification(
            result.message || "ใช้คูปองเรียบร้อยแล้ว",
            "success"
          );
          this.updateCartTotal();
          this.renderCouponSection();
        } catch (err) {
          console.error("Error applying coupon:", err);
          this.showNotification(
            "เกิดข้อผิดพลาดในการใช้คูปอง: " + err.message,
            "error"
          );

          const applyCouponBtn = document.getElementById("applyCouponBtn");
          if (applyCouponBtn) {
            applyCouponBtn.disabled = false;
            applyCouponBtn.textContent = "ใช้คูปอง";
          }
        }
      }

      handleRemoveCoupon() {
        this.appliedCoupon = null;
        this.updateCartTotal();
        this.renderCouponSection();
        this.showNotification("ยกเลิกการใช้คูปองแล้ว", "info");
      }

      renderCouponSection() {
        const couponSection = document.querySelector(".coupon-section");
        if (!couponSection) return;

        const availableCoupons = (this.userCoupons || []).filter(
          (coupon) => coupon.status === "available"
        );

        if (availableCoupons.length === 0) {
          couponSection.innerHTML = `
      <h4>คูปองส่วนลด</h4>
      <p class="no-coupons">
        คุณยังไม่มีคูปองที่สามารถใช้ได้ 
        <a href="/coupons">รับคูปองที่นี่</a>
      </p>
    `;
          return;
        }

        const couponOptions = availableCoupons
          .map(
            (coupon) =>
            `<option value="${
                  coupon.promo_code
                }" data-coupon='${JSON.stringify(coupon)}'>
            ${coupon.name} (${coupon.promo_code})
          </option>`
          )
          .join("");

        couponSection.innerHTML = `
          <h4>คูปองส่วนลด</h4>
          <div class="coupon-box">
            <label for="couponSelect">เลือกคูปอง:</label>
            <select id="couponSelect" ${this.appliedCoupon ? "disabled" : ""}>
              <option value="">-- เลือกคูปอง --</option>
              ${couponOptions}
            </select>
            <button id="applyCouponBtn" ${this.appliedCoupon ? "disabled" : ""}>
              ${this.appliedCoupon ? "ใช้คูปองแล้ว" : "ใช้คูปอง"}
            </button>
            ${
              this.appliedCoupon
                ? `
              <button id="removeCouponBtn" class="remove-coupon-btn">ยกเลิกคูปอง</button>
            `
                : ""
            }
          </div>
          ${
            this.appliedCoupon
              ? `
            <div class="applied-coupon-info">
              <p>ใช้คูปอง: ${this.appliedCoupon.promo_code}</p>
              <p>ส่วนลด: ${this.appliedCoupon.discount.amount} บาท</p>
            </div>
          `
              : ""
          }
        `;

        const applyCouponBtn = document.getElementById("applyCouponBtn");
        const removeCouponBtn = document.getElementById("removeCouponBtn");
        const couponSelect = document.getElementById("couponSelect");

        if (applyCouponBtn) {
          applyCouponBtn.addEventListener(
            "click",
            this.handleApplyCoupon.bind(this)
          );
        }

        if (removeCouponBtn) {
          removeCouponBtn.addEventListener(
            "click",
            this.handleRemoveCoupon.bind(this)
          );
        }

        if (couponSelect && this.appliedCoupon) {
          couponSelect.value = this.appliedCoupon.promo_code;
        }
      }

      async handleQuantityChange(event) {
        const button = event.target;
        if (button.disabled) return;

        const itemId = parseInt(button.dataset.itemId);
        const row = button.closest("tr");
        const display = row.querySelector(".quantity-display");
        const currentQuantity = parseInt(display.textContent);
        const isIncrease = button.classList.contains("increase");
        let newQuantity = isIncrease ?
          currentQuantity + 1 :
          currentQuantity - 1;

        if (newQuantity < 1) return;

        const allButtons = row.querySelectorAll(".quantity-btn");
        allButtons.forEach((btn) => (btn.disabled = true));

        display.textContent = newQuantity;
        this.updateRowTotal(row, newQuantity);
        this.updateCartTotal();

        try {
          const response = await fetch("/api/cart/update", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Accept: "application/json",
            },
            body: JSON.stringify({
              itemId: itemId,
              quantity: newQuantity,
            }),
          });

          const data = await response.json();

          if (!response.ok || !data.success) {
            throw new Error(data.error || "เกิดข้อผิดพลาดในการอัปเดต");
          }

          this.showNotification(
            data.message || "อัปเดตจำนวนสินค้าเรียบร้อย",
            "success"
          );

          const itemIndex = this.cartData.findIndex(
            (item) => item.product_id == itemId
          );
          if (itemIndex !== -1) {
            this.cartData[itemIndex].quantity = newQuantity;
          }
        } catch (err) {
          console.error("Error updating quantity:", err);
          display.textContent = currentQuantity;
          this.updateRowTotal(row, currentQuantity);
          this.updateCartTotal();
          this.showNotification(
            "เกิดข้อผิดพลาดในการอัปเดตจำนวน: " + err.message,
            "error"
          );
        } finally {
          allButtons.forEach((btn) => {
            btn.disabled = false;
            if (btn.classList.contains("decrease") && newQuantity <= 1) {
              btn.disabled = true;
            }
          });
        }
      }

      async handleRemoveItem(event) {
        const button = event.target;
        const itemId = parseInt(button.dataset.itemId);
        const row = button.closest("tr");

        if (!confirm("คุณต้องการลบสินค้านี้ออกจากตะกร้าหรือไม่?")) {
          return;
        }

        button.disabled = true;
        button.textContent = "กำลังลบ...";

        row.style.transition = "all 0.3s ease";
        row.style.transform = "translateX(-100%)";
        row.style.opacity = "0";

        try {
          const response = await fetch(`/api/cart/remove/${itemId}`, {
            method: "DELETE",
            headers: {
              Accept: "application/json",
            },
          });

          const data = await response.json();

          if (!response.ok || !data.success) {
            throw new Error(data.error || "เกิดข้อผิดพลาดในการลบสินค้า");
          }

          setTimeout(() => {
            row.remove();

            this.cartData = this.cartData.filter(
              (item) => item.product_id != itemId
            );

            this.updateCartTotal();
            this.showNotification(
              data.message || "ลบสินค้าออกจากตะกร้าเรียบร้อย",
              "success"
            );

            if (
              document.querySelectorAll(".cart-table tbody tr").length === 0
            ) {
              this.renderEmpty();
            }
          }, 300);
        } catch (err) {
          console.error("Error removing item:", err);
          row.style.transform = "translateX(0)";
          row.style.opacity = "1";
          button.disabled = false;
          button.textContent = "ลบ";
          this.showNotification(
            "เกิดข้อผิดพลาดในการลบสินค้า: " + err.message,
            "error"
          );
        }
      }

      updateRowTotal(row, quantity) {
        const priceText = row.querySelector(".product-price").textContent;
        const price = parseInt(priceText.replace(" บาท", ""));
        const totalElement = row.querySelector(".product-total");
        totalElement.textContent = price * quantity + " บาท";
      }

      updateCartTotal() {
        let subtotal = 0;
        document.querySelectorAll(".cart-table tbody tr").forEach((row) => {
          const totalText = row.querySelector(".product-total").textContent;
          const total = parseInt(totalText.replace(" บาท", ""));
          subtotal += total;
        });

        const subtotalElement = document.getElementById("subtotal");
        const totalElement = document.getElementById("total");

        if (subtotalElement) {
          subtotalElement.textContent = subtotal + " บาท";
        }

        let finalTotal = subtotal;

        if (this.appliedCoupon && this.appliedCoupon.discount) {
          finalTotal = Math.max(
            0,
            subtotal - this.appliedCoupon.discount.amount
          );

          const cartSummary = document.querySelector(".cart-summary");
          const existingDiscount =
            cartSummary.querySelector(".cart-discount");

          if (existingDiscount) {
            existingDiscount.querySelector(
              "span:last-child"
            ).textContent = `-${this.appliedCoupon.discount.amount} บาท`;
          } else if (cartSummary) {
            const discountRow = document.createElement("div");
            discountRow.className = "cart-discount";
            discountRow.innerHTML = `
              <span>ส่วนลด (${this.appliedCoupon.promo_code}):</span>
              <span>-${this.appliedCoupon.discount.amount} บาท</span>
            `;
            const totalLine = cartSummary.querySelector(".cart-total-line");
            if (totalLine) {
              cartSummary.insertBefore(discountRow, totalLine);
            }
          }
        } else {
          const existingDiscount = document.querySelector(".cart-discount");
          if (existingDiscount) {
            existingDiscount.remove();
          }
        }

        if (totalElement) {
          totalElement.textContent = finalTotal + " บาท";
        }
      }

      showNotification(message, type = "info") {
        const notification = document.getElementById("notification");
        const messageElement = document.getElementById("notificationMessage");

        if (!notification || !messageElement) return;

        messageElement.textContent = message;
        notification.className = `notification ${type}`;

        notification.classList.add("show");

        setTimeout(() => {
          notification.classList.remove("show");
        }, 3000);
      }

      getCartSummary() {
        const subtotal = parseInt(
          document.getElementById("subtotal").textContent.replace(" บาท", "")
        );
        const finalTotal = parseInt(
          document.getElementById("total").textContent.replace(" บาท", "")
        );
        const discount = this.appliedCoupon ?
          this.appliedCoupon.discount.amount :
          0;

        return {
          subtotal,
          discount,
          finalTotal,
          appliedCoupon: this.appliedCoupon,
          items: this.cartData,
        };
      }
    }

    function openCheckoutModal() {
      const modal = document.getElementById("checkoutModal");
      const summary = shoppingCart.getCartSummary();

      const summaryContent = document.getElementById("orderSummaryContent");
      summaryContent.innerHTML = `
        <div class="summary-line">
          <span>ราคาสินค้า:</span>
          <span>${summary.subtotal} บาท</span>
        </div>
        ${
          summary.discount > 0
            ? `
          <div class="summary-line">
            <span>ส่วนลด:</span>
            <span>-${summary.discount} บาท</span>
          </div>
        `
            : ""
        }
        <div class="summary-line">
          <span>ค่าจัดส่ง:</span>
          <span>25</span>
        </div>
        <div class="summary-line total">
          <span>ยอดรวมทั้งสิ้น:</span>
          <span>${summary.finalTotal} บาท</span>
        </div>
      `;

      modal.style.display = "flex";
    }

    function closeCheckoutModal() {
      document.getElementById("checkoutModal").style.display = "none";
    }

    document
      .getElementById("checkoutForm")
      .addEventListener("submit", async function (e) {
        e.preventDefault();

        const loading = document.getElementById("checkoutLoading");
        loading.style.display = "flex";

        const deliveryAddress = document
          .getElementById("deliveryAddress")
          .value.trim();
        const notes = document.getElementById("notes").value.trim();

        if (!deliveryAddress) {
          loading.style.display = "none";
          alert("กรุณากรอกข้อมูลให้ครบถ้วน");
          return;
        }

        try {
          const summary = shoppingCart.getCartSummary();

          const orderData = {
            delivery_address: deliveryAddress,
            notes: notes,
            promo_code: summary.appliedCoupon ?
              summary.appliedCoupon.promo_code :
              null,
          };

          const response = await fetch("/api/orders", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            credentials: "include",
            body: JSON.stringify(orderData),
          });

          const result = await response.json();

          if (!response.ok || !result.success) {
            throw new Error(result.error || "ไม่สามารถสร้างคำสั่งซื้อได้");
          }

          window.location.href = `/orders/${result.order_id}/pay`;

        } catch (err) {
          console.error("Checkout error:", err);
          loading.style.display = "none";
          alert("เกิดข้อผิดพลาด: " + err.message);
        }
      });

      const shoppingCart = new ShoppingCart();

      document.addEventListener("click", (e) => {
        const modal = document.getElementById("checkoutModal");
        if (e.target === modal) {
          closeCheckoutModal();
        }
      });
  </script>
</body>

</html>