<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</title>
  <link rel="stylesheet" href="/css/base.css">
  <style>
    .payment-container {
      max-width: 600px;
      margin: 0 auto;
      background: white;
      border-radius: 16px;
      padding: 30px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }

    .order-info {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 12px;
      margin-bottom: 30px;
    }

    .order-info h3 {
      margin-bottom: 16px;
      color: var(--color-primary);
    }

    .info-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 12px;
    }

    .info-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px 0;
      border-bottom: 1px solid #e5e7eb;
    }

    .info-item:last-child {
      border-bottom: none;
      font-weight: 700;
      font-size: 1.1rem;
      color: var(--color-primary);
    }

    .payment-methods {
      margin-bottom: 30px;
    }

    .payment-methods h3 {
      margin-bottom: 20px;
      color: var(--color-primary);
    }

    .method-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 16px;
    }

    .payment-option {
      border: 2px solid #e5e7eb;
      border-radius: 12px;
      padding: 20px;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
    }

    .payment-option:hover {
      border-color: var(--color-primary);
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .payment-option.selected {
      border-color: var(--color-primary);
      background: #f0f9ff;
    }

    .payment-option input[type="radio"] {
      position: absolute;
      opacity: 0;
      cursor: pointer;
    }

    .payment-icon {
      font-size: 2rem;
      margin-bottom: 12px;
      display: block;
    }

    .payment-title {
      font-weight: 600;
      margin-bottom: 8px;
      color: var(--color-primary);
    }

    .payment-desc {
      font-size: 0.9rem;
      color: #6b7280;
      line-height: 1.4;
    }

    .amount-input {
      margin-bottom: 30px;
      display: none;
    }

    .amount-input.show {
      display: block;
    }

    .amount-input label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: var(--color-primary);
    }

    .amount-input input {
      width: 100%;
      padding: 12px;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      font-size: 1.1rem;
      transition: border-color 0.3s ease;
    }

    .amount-input input:focus {
      outline: none;
      border-color: var(--color-primary);
    }

    .payment-details {
      background: #fff7ed;
      border: 1px solid #fed7aa;
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 30px;
      display: none;
    }

    .payment-details.show {
      display: block;
    }

    .qr-code {
      text-align: center;
      padding: 20px;
    }

    .qr-placeholder {
      width: 200px;
      height: 200px;
      background: #f3f4f6;
      border: 2px dashed #d1d5db;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 16px;
      font-size: 3rem;
      color: #9ca3af;
    }

    .payment-actions {
      display: flex;
      gap: 16px;
    }

    .btn {
      flex: 1;
      padding: 14px;
      border: none;
      border-radius: 8px;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .btn-primary {
      background: var(--color-primary);
      color: white;
    }

    .btn-primary:hover:not(:disabled) {
      background: #374151;
      transform: translateY(-2px);
    }

    .btn-primary:disabled {
      background: #9ca3af;
      cursor: not-allowed;
    }

    .btn-secondary {
      background: #6b7280;
      color: white;
    }

    .btn-secondary:hover {
      background: #4b5563;
    }

    .loading {
      display: none;
      align-items: center;
      justify-content: center;
      gap: 8px;
      color: white;
    }

    .loading.show {
      display: flex;
    }

    .spinner {
      width: 16px;
      height: 16px;
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-top: 2px solid white;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .success-message {
      text-align: center;
      padding: 40px 20px;
    }

    .success-icon {
      font-size: 4rem;
      color: #10b981;
      margin-bottom: 20px;
    }

    .success-message h3 {
      color: #10b981;
      margin-bottom: 16px;
    }

    .success-message p {
      color: #6b7280;
      margin-bottom: 24px;
    }

    .error-message {
      background: #fee2e2;
      border: 1px solid #fecaca;
      color: #991b1b;
      padding: 16px;
      border-radius: 8px;
      margin: 20px 0;
      display: none;
    }

    .error-message.show {
      display: block;
    }

    .order-id-display {
      background: #f3f4f6;
      padding: 12px;
      border-radius: 8px;
      font-family: monospace;
      font-size: 1.1rem;
      font-weight: 700;
      text-align: center;
      margin: 20px 0;
      border: 2px solid #e5e7eb;
    }

    @media (max-width: 768px) {
      .payment-container {
        margin: 20px;
        padding: 20px;
      }

      .method-grid {
        grid-template-columns: 1fr;
      }

      .payment-actions {
        flex-direction: column;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <h2>‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h2>
    
    <div class="payment-container">
      <div id="paymentContent">
        <div class="order-info">
          <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h3>
          <div id="orderDetails">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    class PaymentProcessor {
      constructor() {
        this.orderId = this.getOrderIdFromUrl();
        this.orderData = null;
        this.selectedMethod = null;
        this.loadOrderData();
      }

      getOrderIdFromUrl() {
        const pathSegments = window.location.pathname.split('/');
        const orderIndex = pathSegments.indexOf('orders');
        if (orderIndex !== -1 && pathSegments[orderIndex + 1]) {
          return pathSegments[orderIndex + 1];
        }
        return null;
      }

      async loadOrderData() {
        if (!this.orderId) {
          this.showError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠');
          return;
        }

        try {
          const response = await fetch(`/api/orders/${this.orderId}`, {
            credentials: 'include'
          });
          
          const data = await response.json();
          
          if (!response.ok || !data.success) {
            throw new Error(data.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ');
          }

          this.orderData = data.order;
          this.renderOrderDetails();
          this.renderPaymentMethods();
          
        } catch (err) {
          console.error('Error loading order:', err);
          this.showError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + err.message);
        }
      }

      renderOrderDetails() {
        const orderDetails = document.getElementById('orderDetails');
        
        orderDetails.innerHTML = `
          <div class="order-id-display">‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #${this.orderData.order_id}</div>
          
          <div class="info-grid">
            <div class="info-item">
              <span>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:</span>
              <span>${new Date(this.orderData.created_at).toLocaleString('th-TH')}</span>
            </div>
            <div class="info-item">
              <span>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:</span>
              <span>${this.getStatusText(this.orderData.order_status)}</span>
            </div>
            <div class="info-item">
              <span>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:</span>
              <span>${this.orderData.delivery_address || '‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô'}</span>
            </div>
            <div class="info-item">
              <span>‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞:</span>
              <span>${this.orderData.final_amount - 25} ‡∏ö‡∏≤‡∏ó</span>
            </div>
          </div>
        `;
      }

      renderPaymentMethods() {
        const content = document.getElementById('paymentContent');
        
        content.innerHTML += `
          <div class="payment-methods">
            <h3>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>
            <div class="method-grid">
              <div class="payment-option" data-method="cash">
                <input type="radio" name="payment" value="cash">
                <div class="payment-icon">üíµ</div>
                <div class="payment-title">‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á</div>
                <div class="payment-desc">‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</div>
              </div>
              
              <div class="payment-option" data-method="credit_card">
                <input type="radio" name="payment" value="credit_card">
                <div class="payment-icon">üí≥</div>
                <div class="payment-title">‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</div>
                <div class="payment-desc">‡∏ä‡∏≥‡∏£‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï</div>
              </div>
              
              <div class="payment-option" data-method="mobile_banking">
                <input type="radio" name="payment" value="mobile_banking">
                <div class="payment-icon">üì±</div>
                <div class="payment-title">‡πÇ‡∏°‡∏ö‡∏≤‡∏¢‡πÅ‡∏ö‡∏á‡∏Å‡∏¥‡πâ‡∏á</div>
                <div class="payment-desc">‡∏ä‡∏≥‡∏£‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</div>
              </div>
              
              <div class="payment-option" data-method="promptpay">
                <input type="radio" name="payment" value="promptpay">
                <div class="payment-icon">üíé</div>
                <div class="payment-title">‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå</div>
                <div class="payment-desc">‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞</div>
              </div>
            </div>
          </div>

          <div id="paymentDetails" class="payment-details">
            <!-- Payment-specific details will be shown here -->
          </div>

          <div class="amount-input" id="amountInput">
            <label for="paymentAmount">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞ (‡∏ö‡∏≤‡∏ó)</label>
            <input type="number" id="paymentAmount" min="1" step="0.01" 
                   value="${this.orderData.final_amount - 25}" required>
          </div>

          <div id="errorMessage" class="error-message"></div>

          <div class="payment-actions">
            <button type="button" class="btn btn-secondary" onclick="history.back()">
              ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            </button>
            <button type="button" class="btn btn-primary" id="payButton" onclick="paymentProcessor.processPayment()" disabled>
              <span id="payButtonText">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</span>
              <div class="loading" id="payButtonLoading">
                <div class="spinner"></div>
                <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...</span>
              </div>
            </button>
          </div>
        `;

        this.attachEventListeners();
      }

      attachEventListeners() {
        const paymentOptions = document.querySelectorAll('.payment-option');
        
        paymentOptions.forEach(option => {
          option.addEventListener('click', () => {
            const method = option.dataset.method;
            this.selectPaymentMethod(method);
          });
        });

        const amountInput = document.getElementById('paymentAmount');
        amountInput.addEventListener('input', () => {
          this.validateAmount();
        });
      }

      selectPaymentMethod(method) {
        document.querySelectorAll('.payment-option').forEach(opt => {
          opt.classList.remove('selected');
          opt.querySelector('input[type="radio"]').checked = false;
        });

        const selectedOption = document.querySelector(`[data-method="${method}"]`);
        selectedOption.classList.add('selected');
        selectedOption.querySelector('input[type="radio"]').checked = true;

        this.selectedMethod = method;
        this.showPaymentDetails(method);
        this.updatePayButton();
      }

      showPaymentDetails(method) {
        const detailsDiv = document.getElementById('paymentDetails');
        const amountInput = document.getElementById('amountInput');
        
        switch(method) {
          case 'cash':
            detailsDiv.innerHTML = `
              <h4>‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á</h4>
              <p>‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
              <p><strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏û‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á</p>
            `;
            amountInput.classList.add('show');
            break;
            
          case 'promptpay':
            detailsDiv.innerHTML = `
              <h4>‡∏ä‡∏≥‡∏£‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå</h4>
              <div class="qr-code">
                <div class="qr-placeholder">QR</div>
                <p>‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</p>
                <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</strong> ${this.orderData.final_amount - 25} ‡∏ö‡∏≤‡∏ó</p>
                <p><small>‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"</small></p>
              </div>
            `;
            amountInput.classList.remove('show');
            break;
            
          case 'mobile_banking':
            detailsDiv.innerHTML = `
              <h4>‡∏ä‡∏≥‡∏£‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡πÇ‡∏°‡∏ö‡∏≤‡∏¢‡πÅ‡∏ö‡∏á‡∏Å‡∏¥‡πâ‡∏á</h4>
              <p><strong>‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô:</strong></p>
              <p>‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢<br>
              ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: 123-4-56789-0<br>
              ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ T&KFood</p>
              <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:</strong> ${this.orderData.final_amount - 25} ‡∏ö‡∏≤‡∏ó</p>
              <p><small>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"</small></p>
            `;
            amountInput.classList.remove('show');
            break;
            
          case 'credit_card':
            detailsDiv.innerHTML = `
              <h4>‡∏ä‡∏≥‡∏£‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï</h4>
              <p>‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</p>
              <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:</strong> ${this.orderData.final_amount - 25} ‡∏ö‡∏≤‡∏ó</p>
              <p><small>‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£ Visa, Mastercard, JCB</small></p>
            `;
            amountInput.classList.remove('show');
            break;
        }
        
        detailsDiv.classList.add('show');
      }

      updatePayButton() {
        const payButton = document.getElementById('payButton');
        const payButtonText = document.getElementById('payButtonText');
        
        if (this.selectedMethod) {
          payButton.disabled = false;
          
          switch(this.selectedMethod) {
            case 'cash':
              payButtonText.textContent = '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠';
              break;
            case 'promptpay':
            case 'mobile_banking':
              payButtonText.textContent = '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô';
              break;
            case 'credit_card':
              payButtonText.textContent = '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô';
              break;
          }
        } else {
          payButton.disabled = true;
          payButtonText.textContent = '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô';
        }
      }

      validateAmount() {
        const amountInput = document.getElementById('paymentAmount');
        const amount = parseFloat(amountInput.value);
        
        if (this.selectedMethod === 'cash' && amount < this.orderData.final_amount - 25) {
          this.showError('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞');
          return false;
        }
        
        this.hideError();
        return true;
      }

      async processPayment() {
        if (!this.selectedMethod) {
          this.showError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô');
          return;
        }

        if (this.selectedMethod === 'cash' && !this.validateAmount()) {
          return;
        }

        const payButton = document.getElementById('payButton');
        const payButtonText = document.getElementById('payButtonText');
        const payButtonLoading = document.getElementById('payButtonLoading');
        
        payButton.disabled = true;
        payButtonText.style.display = 'none';
        payButtonLoading.classList.add('show');

        try {
          const amountInput = document.getElementById('paymentAmount');
          const amount = this.selectedMethod === 'cash' 
            ? parseFloat(amountInput.value) 
            : this.orderData.final_amount;

          const response = await fetch(`/api/payments/${this.orderId}/pay`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify({
              method: this.selectedMethod,
              amount: amount
            })
          });

          const result = await response.json();
          
          if (!response.ok || !result.success) {
            throw new Error(result.error || '‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          }

          this.showPaymentSuccess();

        } catch (err) {
          console.error('Payment error:', err);
          this.showError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô: ' + err.message);
          
          payButton.disabled = false;
          payButtonText.style.display = 'inline';
          payButtonLoading.classList.remove('show');
        }
      }

      showPaymentSuccess() {
        const content = document.getElementById('paymentContent');
        
        content.innerHTML = `
          <div class="success-message">
            <div class="success-icon">‚úÖ</div>
            <h3>‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</h3>
            <p>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß</p>
            <div class="order-id-display">‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #${this.orderData.order_id}</div>
            <p>‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì</p>
            <div class="payment-actions">
              <a href="/orders" class="btn btn-primary">‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</a>
              <a href="/" class="btn btn-secondary">‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</a>
            </div>
          </div>
        `;
      }

      getStatusText(status) {
        const statusMap = {
          'pending': '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
          'accepted': '‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß',
          'cooking': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°',
          'delivering': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á',
          'completed': '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
          'cancelled': '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
        };
        return statusMap[status] || status;
      }

      showError(message) {
        const errorDiv = document.getElementById('errorMessage');
        errorDiv.textContent = message;
        errorDiv.classList.add('show');
      }

      hideError() {
        const errorDiv = document.getElementById('errorMessage');
        errorDiv.classList.remove('show');
      }
    }

    const paymentProcessor = new PaymentProcessor();
  </script>
</body>
</html>