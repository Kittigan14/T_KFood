<!DOCTYPE html>
<html lang="th">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ - T&KFood</title>
  <link rel="stylesheet" href="/css/base.css">
  <link rel="stylesheet" href="/css/coupons.css">
  <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>

<body>
  <div class="coupon-container">
    <h2>üéüÔ∏è ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©</h2>
    <div id="coupon-list">
      <div class="loading-container">
        <div class="loading-spinner"></div>
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ...</p>
      </div>
    </div>
  </div>

  <script>
    class CouponManager {
      constructor() {
        this.container = document.getElementById('coupon-list');
        this.loadCoupons();
      }

      async loadCoupons() {
        try {
          console.log('Loading coupons...');

          const response = await fetch('/api/promotions/active', {
            headers: {
              'Accept': 'application/json'
            }
          });

          console.log('Response status:', response.status);

          if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
          }

          const data = await response.json();
          console.log('Received data:', data);

          if (!data.success) {
            throw new Error(data.error || 'Failed to load promotions');
          }

          if (!data.promotions || data.promotions.length === 0) {
            this.showEmpty();
            return;
          }

          this.renderCoupons(data.promotions);

        } catch (error) {
          console.error('Error loading coupons:', error);
          this.showError(error.message);
        }
      }

      renderCoupons(promotions) {
        const couponCards = promotions.map(promotion => {
          const details = this.getPromotionDetails(promotion);

          return `
            <div class="coupon-card" data-type="${promotion.type}">
              <div class="coupon-header">
                <h3 class="coupon-title">${promotion.name}</h3>
                <span class="coupon-code">${promotion.promo_code}</span>
              </div>
              
              <p class="coupon-description">${promotion.description}</p>
              
              <div class="coupon-details">
                ${details.map(detail => `
                  <div class="coupon-detail-item">
                    <span>${detail.label}</span>
                    <strong>${detail.value}</strong>
                  </div>
                `).join('')}
              </div>
              
              <button class="claim-btn" onclick="claimCoupon(${promotion.promotion_id}, '${promotion.name}', '${promotion.promo_code}')">
                ‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ
              </button>
            </div>
          `;
        }).join('');

        this.container.innerHTML = `
          <div class="coupon-grid">
            ${couponCards}
          </div>
        `;
      }

      getPromotionDetails(promotion) {
        const details = [];

        switch (promotion.type) {
          case 'percentage':
            details.push({
              label: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î',
              value: `${promotion.discount_value}%`
            }, {
              label: '‡∏¢‡∏≠‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥',
              value: `${promotion.min_order_amount} ‡∏ö‡∏≤‡∏ó`
            });
            if (promotion.max_discount_amount) {
              details.push({
                label: '‡∏•‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î',
                value: `${promotion.max_discount_amount} ‡∏ö‡∏≤‡∏ó`
              });
            }
            break;

          case 'fixed_amount':
            details.push({
              label: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î',
              value: `${promotion.discount_value} ‡∏ö‡∏≤‡∏ó`
            }, {
              label: '‡∏¢‡∏≠‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥',
              value: `${promotion.min_order_amount} ‡∏ö‡∏≤‡∏ó`
            });
            break;

          case 'free_shipping':
            details.push({
              label: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î',
              value: '‡∏ü‡∏£‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á'
            });
            break;

          case 'buy_x_get_y':
            details.push({
              label: '‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô',
              value: `‡∏ã‡∏∑‡πâ‡∏≠ ${promotion.buy_quantity} ‡πÅ‡∏ñ‡∏° ${promotion.get_quantity}`
            });
            break;

          case 'category_discount':
            details.push({
              label: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î',
              value: `${promotion.discount_value}% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞`
            }, {
              label: '‡∏•‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î',
              value: `${promotion.max_discount_amount || '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î'} ‡∏ö‡∏≤‡∏ó`
            });
            break;
        }

        // Format expiry date
        const expiryDate = new Date(promotion.end_date);
        const formattedDate = expiryDate.toLocaleDateString('th-TH', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });

        details.push({
          label: '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏',
          value: formattedDate
        });

        if (promotion.usage_per_customer) {
          details.push({
            label: '‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ',
            value: `${promotion.usage_per_customer} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô`
          });
        }

        return details;
      }

      showEmpty() {
        this.container.innerHTML = `
          <div class="empty-container">
            <h3>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ</h3>
            <p>‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
            <p>‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏î‡∏π‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏•‡∏≤‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏î‡∏µ‡πÜ!</p>
            <button class="retry-btn" onclick="location.reload()">‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà</button>
          </div>
        `;
      }

      showError(errorMessage) {
        this.container.innerHTML = `
          <div class="error-container">
            <h3>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h3>
            <p>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ</p>
            <p><strong>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:</strong> ${errorMessage}</p>
            <button class="retry-btn" onclick="location.reload()">‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</button>
          </div>
        `;
      }
    }

    async function claimCoupon(promotion_id, promotionName, promoCode) {
      const button = event.target;
      const card = button.closest('.coupon-card');
      const originalText = button.textContent;

      button.disabled = true;
      button.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á...';

      try {
        const response = await fetch('/api/coupons/claim', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({
            promotion_id
          })
        });

        const result = await response.json();

        if (result.success) {
          showNotification(`‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á "${promotionName}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!`, 'success');
          card.remove();
        } else {
          throw new Error(result.message);
        }

      } catch (error) {
        console.error('Error claiming coupon:', error);
        showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message, 'error');
        button.disabled = false;
        button.textContent = originalText;
      }
    }


    function showNotification(message, type = 'info') {
      // Create notification element if it doesn't exist
      let notification = document.getElementById('notification');
      if (!notification) {
        notification = document.createElement('div');
        notification.id = 'notification';
        notification.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          padding: 15px 20px;
          border-radius: 8px;
          color: white;
          font-weight: 600;
          z-index: 1000;
          transform: translateX(100%);
          transition: transform 0.3s ease;
          max-width: 400px;
          word-wrap: break-word;
        `;
        document.body.appendChild(notification);
      }

      // Set background color based on type
      const colors = {
        success: 'linear-gradient(135deg, #28a745, #20c997)',
        error: 'linear-gradient(135deg, #dc3545, #c82333)',
        info: 'linear-gradient(135deg, #1a1a1a, #333)'
      };

      notification.style.background = colors[type] || colors.info;
      notification.textContent = message;

      // Show notification
      notification.style.transform = 'translateX(0)';

      // Auto hide after 4 seconds
      setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
      }, 4000);
    }

    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', () => {
      new CouponManager();
    });
  </script>
</body>

</html>