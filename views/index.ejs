<!DOCTYPE html>
<html lang="th">

<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/notification.css">
    <title><%= title %></title>

</head>

<body>

    <nav class="navbar fade-slide">
        <div class="container flex-between">
            <div class="navbar-left">
                <a href="/" class="logo">‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</a>
                <a href="/coupons" class="logo">‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á</a>
                <a href="/" class="logo">‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô</a>
            </div>
            <div class="navbar-center">
                <span class="title"><%= title %></span>
            </div>
            <div class="navbar-right">
                <a href="/favorites" class="icon" id="favorites-link">
                    <img src="/images/icon/heart.png" width="24px">
                    <span id="favorites-count" class="count-badge">0</span>
                </a>
                <a href="/cart" class="icon" id="cart-link">
                    <img src="/images/icon/shopping-cart2.png" width="24px" />
                    <span id="cart-count" class="count-badge">0</span>
                </a>
                <% if (typeof user !== "undefined" && user) { %>
                <span class="username">‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, <%= user.name.substring(0, 9) %></span>
                <div class="dropdown">
                    <button id="btnSettings" class="settings-btn"><img src="/images/icon/settings.png"
                            width="24px"></button>
                    <div id="dropdownMenu" class="dropdown-content hidden">
                        <a href="/profile">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</a>
                        <a href="/orders">‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</a>
                        <a href="/logout" class="logout">‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</a>
                    </div>
                </div>
                <% } else { %>
                <a href="/login" class="btn">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</a>
                <a href="/register" class="btn">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</a>
                <% } %>
            </div>
        </div>
    </nav>

    <!-- Banner -->
    <section class="banner fade-slide">
        <div class="content-banner ">
            <h1>
                ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà T&KFood<br>
                ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏≤‡∏á‡πÉ‡∏à
            </h1>
        </div>
    </section>

    <!-- Categories -->
    <section class="container fade-slide">
        <h2>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</h2>
        <div class="categories">
            <button onclick="showAllProducts()">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</button>
            <% categories.forEach(cat => { %>
            <button onclick="filterCategory(<%= cat.category_id %>)">
                <%= cat.name %>
            </button>
            <% }) %>
        </div>
    </section>

    <!-- Products -->
    <section class="container fade-slide">
        <h2>‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h2>
        <div id="productList" class="product-grid">
            <% products.forEach(p => { %>
            <div class="product-card fade-slide" data-id="<%= p.product_id %>" data-name="<%= p.name %>"
                data-price="<%= p.price %>" data-image="<%= p.image_url %>">
                <img src="/images/<%= p.image_url %>" alt="<%= p.name %>">
                <div class="info">
                    <h3><%= p.name %></h3>
                    <p><%= p.price %> ‡∏ö‡∏≤‡∏ó</p>
                </div>
            </div>
            <% }) %>
        </div>
    </section>

    <!-- Product Modal -->
    <div id="productModal" class="modal hidden">
        <div class="modal-content">
            <button onclick="closeModal()" class="modal-close">‚úï</button>
            <img id="modalImage" alt="Product Image">
            <div class="modal-info">
                <h2 id="modalName"></h2>
                <p id="modalPrice"></p>
                <div class="modal-buttons">
                    <button type="button" class="btn-cart" data-id="" onclick="addToCart(this)">
                        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
                    </button>
                    <button type="button" class="btn-favorite" data-id="" onclick="toggleFavorite(this)">
                        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Notification -->
    <div id="notification" class="notification hidden">
        <span id="notificationMessage"></span>
    </div>

    <!-- Reviews -->
    <section class="reviews fade-slide">
        <div class="container">
            <h2>‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</h2>
            <% reviews.forEach(r => { %>
            <div class="review">
                <p>"<%= r.comment %>"</p>
                <small>‡πÇ‡∏î‡∏¢ <%= r.name %> ‚≠ê <%= r.rating %></small>
            </div>
            <% }) %>
        </div>
    </section>

    <!-- Footer -->
    <footer class="footer fade-slide">
        <div class="container">
            <div class="footer-left">
                <p class="title-footer">üç≤ T&KFood</p>
                <p>üè¢ ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: 123 ‡∏ñ‡∏ô‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø</p>
                <p>üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå: 099-123-4567</p>
                <p>üïò 9:00-19:00‡∏ô. ‡∏´‡∏¢‡∏∏‡∏î‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå</p>
            </div>
            <div class="footer-center">
                <p>üìß Gmail: restaurant@example.com</p>
                <p>üí¨ Line: @restaurant</p>
            </div>
            <div class="footer-right">
                <p>‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û ‡∏™‡πà‡∏á‡∏ï‡∏£‡∏á‡∏ñ‡∏∂‡∏á‡∏ö‡πâ‡∏≤‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
                    ‡∏°‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!</p>
            </div>
        </div>
    </footer>

    <script>
        let currentProductId = null;
        const isLoggedIn = <%= user ? 'true' : 'false' %>;
    </script>
    <script src="/js/animation.js"></script>
    <script src="/js/main.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            if (isLoggedIn) {
                updateCartCount();
                updateFavoriteCount();
            }
            setupEventListeners ?.();
        });

        function setupEventListeners() {
            const btnSettings = document.getElementById("btnSettings");
            const dropdownMenu = document.getElementById("dropdownMenu");

            if (btnSettings && dropdownMenu) {
                btnSettings.addEventListener("click", (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    dropdownMenu.classList.toggle("hidden");
                });

                document.addEventListener("click", (e) => {
                    if (!dropdownMenu.contains(e.target) && !btnSettings.contains(e.target)) {
                        dropdownMenu.classList.add("hidden");
                    }
                });
            }

            // Setup product list click handler
            setupProductClickHandler();

            // Modal close events
            const productModal = document.getElementById("productModal");
            if (productModal) {
                productModal.addEventListener("click", (e) => {
                    if (e.target === productModal) {
                        closeModal();
                    }
                });
            }

            // Escape key to close modal
            document.addEventListener("keydown", (e) => {
                if (e.key === "Escape" && !productModal.classList.contains("hidden")) {
                    closeModal();
                }
            });
        }

        // Setup product click handler - separate function for reusability
        function setupProductClickHandler() {
            const productList = document.getElementById("productList");
            if (!productList) {
                console.error('Product list element not found');
                return;
            }

            // Remove existing event listeners to prevent duplicates
            const newProductList = productList.cloneNode(true);
            productList.parentNode.replaceChild(newProductList, productList);

            // Add click event listener to the new element
            newProductList.addEventListener("click", (e) => {
                e.preventDefault();
                console.log('Product list clicked', e.target); // Debug log

                const card = e.target.closest(".product-card");
                if (!card) {
                    console.log('No product card found');
                    return;
                }

                console.log('Product card found:', card); // Debug log

                const id = card.dataset.id;
                const name = card.dataset.name;
                const price = card.dataset.price;
                const image = card.dataset.image;

                console.log('Product data:', {
                    id,
                    name,
                    price,
                    image
                }); // Debug log

                if (!id || !name || !price || !image) {
                    console.error('Missing product data:', {
                        id,
                        name,
                        price,
                        image
                    });
                    return;
                }

                openProductModal(id, name, price, image);
            });
        }

        // Open product modal
        function openProductModal(id, name, price, image) {
            console.log('Opening modal with:', {
                id,
                name,
                price,
                image
            }); // Debug log

            currentProductId = id;

            const modalImage = document.getElementById("modalImage");
            const modalName = document.getElementById("modalName");
            const modalPrice = document.getElementById("modalPrice");
            const productModal = document.getElementById("productModal");

            if (!modalImage || !modalName || !modalPrice || !productModal) {
                console.error('Modal elements not found:', {
                    modalImage: !!modalImage,
                    modalName: !!modalName,
                    modalPrice: !!modalPrice,
                    productModal: !!productModal
                });
                return;
            }

            modalImage.src = "/images/" + image;
            modalImage.alt = name;
            modalName.textContent = name;
            modalPrice.textContent = price + " ‡∏ö‡∏≤‡∏ó";

            // Update button data-id attributes
            const cartBtn = document.querySelector('.btn-cart');
            const favoriteBtn = document.querySelector('.btn-favorite');
            if (cartBtn) cartBtn.dataset.id = id;
            if (favoriteBtn) favoriteBtn.dataset.id = id;

            console.log('Modal elements updated, showing modal'); // Debug log

            productModal.classList.remove("hidden");
            document.body.style.overflow = "hidden";

            console.log('Modal should be visible now'); // Debug log
        }

        // Close modal
        function closeModal() {
            const productModal = document.getElementById("productModal");
            productModal.classList.add("hidden");
            document.body.style.overflow = "";
            currentProductId = null;
        }

        // Update cart count
        async function updateCartCount() {
            try {
                const response = await fetch('/api/cart/count');
                const data = await response.json();
                const countElement = document.getElementById('cart-count');
                if (countElement) {
                    countElement.textContent = data.count || 0;
                    countElement.style.display = (data.count > 0) ? 'inline-block' : 'none';
                }
            } catch (error) {
                console.error('Error updating cart count:', error);
            }
        }

        // Update favorites count
        async function updateFavoritesCount() {
            try {
                const response = await fetch('/api/favorites/count');
                const data = await response.json();
                const countElement = document.getElementById('favorites-count');
                if (countElement) {
                    countElement.textContent = data.count || 0;
                    countElement.style.display = (data.count > 0) ? 'inline-block' : 'none';
                }
            } catch (error) {
                console.error('Error updating favorites count:', error);
            }
        }

        // Category filter
        function filterCategory(catId) {
            fetch(`/api/products?category_id=${catId}`)
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        updateProductList(data.products);
                    }
                })
                .catch(err => {
                    console.error('Error fetching products:', err);
                    showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', 'error');
                });
        }

        function showAllProducts() {
            fetch('/api/products')
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        updateProductList(data.products);
                    }
                })
                .catch(err => {
                    console.error('Error fetching products:', err);
                    showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', 'error');
                });
        }

        function updateProductList(products) {
            const list = document.getElementById("productList");
            if (!list) {
                console.error('Product list element not found');
                return;
            }

            list.innerHTML = "";

            products.forEach(p => {
                const productCard = document.createElement('div');
                productCard.className = 'product-card fade-slide';
                productCard.dataset.id = p.product_id;
                productCard.dataset.name = p.name;
                productCard.dataset.price = p.price;
                productCard.dataset.image = p.image_url;

                productCard.innerHTML = `
                    <img src="/images/${p.image_url}" alt="${p.name}">
                    <div class="info">
                        <h3>${p.name}</h3>
                        <p>${p.price} ‡∏ö‡∏≤‡∏ó</p>
                    </div>
                `;

                list.appendChild(productCard);
            });

            // Re-setup click handlers for new products
            setupProductClickHandler();
        }

        // Animation functions
        function isInViewport(element) {
            const rect = element.getBoundingClientRect();
            return (
                rect.top <= (window.innerHeight || document.documentElement.clientHeight) &&
                rect.bottom >= 0
            );
        }

        function animateOnScroll() {
            const elements = document.querySelectorAll('.fade-slide');
            elements.forEach(el => {
                if (isInViewport(el)) {
                    el.classList.add('in-view');
                }
            });
        }

        window.addEventListener('scroll', animateOnScroll);
        window.addEventListener('load', () => {
            animateOnScroll();
            document.querySelectorAll('.fade-slide').forEach(el => {
                el.classList.add('in-view');
            });
        });

        const observer2 = new IntersectionObserver(entries => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                productFaders.forEach((el, index) => {
                    setTimeout(() => {
                    el.classList.add('show');
                    }, index * 150);
                });
                observer2.unobserve(entry.target);
                }
            });
        }, { threshold: 0.2 });

        productFaders.forEach(el => observer2.observe(el));
    </script>
</body>

</html>